<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calcul de VMA</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            max-width: 600px;
            margin: auto;
        }
        input[type="text"], input[type="number"], select {
            font-size: 18px;
            padding: 10px;
            width: 100%;
            max-width: 100px;
            border-radius: 50%; /* Rendre les champs de saisie en rond */
            margin: 10px 5px;
        }
        button {
            font-size: 18px;
            margin: 10px 10px;
            padding: 15px;
            cursor: pointer;
            color: white;
            border: none;
            border-radius: 50%;
            width: 110px;
            height: 110px;
            margin: 10px;
        }
        .btn-start { background-color: #4CAF50; }
        .btn-plot { background-color: #2196F3; }
        .btn-reset { background-color: #FF9800; }
        .btn-download { background-color: #F44336; }
        .info-box {
            border: 2px solid green;
            padding: 10px;
            margin: 20px 0;
            font-weight: bold;
            color: green;
            display: none;
        }
        .results {
            margin-top: 20px;
            font-size: 16px;
        }
        #resultsLog {
            margin: 10px 0;
        }
        #authorSection {
            margin-top: 30px;
            border: 1px solid black;
            padding: 10px;
            display: none;
        }
    </style>
</head>
<body>

    <h1>Calcul de la VMA</h1>

    <input type="text" id="runnerName" placeholder="Nom du coureur" required>
    <input type="text" id="observerName" placeholder="Nom de l'observateur" required>

    <div class="input-row">
        <input type="number" id="runnerVMA" placeholder="VMA (km/h)" required step="0.5" onchange="updatePrediction()">
        <input type="number" id="targetPercentage" placeholder="% VMA" required step="1" onchange="updatePrediction()">
    </div>

    <!-- Dur√©e de la course (pour d√©marrage) -->
    <label for="duration">Dur√©e de la course :</label>
    <select id="duration">
        <option value="90">1:30</option>
        <option value="180">3:00</option>
        <option value="270">4:30</option>
        <!-- autres options possibles -->
    </select>

    <div id="infoBox" class="info-box"></div>
    
    <div>
        <button class="btn-start" onclick="startRace()">D√©marrer</button>
        <button class="btn-plot" onclick="addPlot()">Passer un plot</button>
    </div>

    <div id="controlSection" style="display:none;">
        <p>Temps √©coul√© : <span id="timeElapsed">0:00</span></p>
        <p>Plots pass√©s : <span id="plotCount">0</span></p>
        <div id="resultsLog"></div>
        <button class="btn-reset" onclick="resetData()">R√©initialiser</button>
        <button class="btn-download" onclick="downloadResults()">T√©l√©charger</button>
    </div>

    <div id="authorSection">
        <p>Auteur : J√©r√¥me BARLETTA</p>
        <a href="http://bjerome.eklablog.com/accueil-c30088056" target="_blank">Acc√©der au blog</a>
    </div>

    <script>
        let duration, interval, timeElapsed = 0, plotCount = 0, results = [];

        function updatePrediction() {
            const runnerVMA = parseFloat(document.getElementById("runnerVMA").value);
            const targetPercentage = parseFloat(document.getElementById("targetPercentage").value);

            if (!isNaN(runnerVMA) && !isNaN(targetPercentage)) {
                const targetVMA = (runnerVMA * (targetPercentage / 100));
                const expectedPlots = Math.ceil(targetVMA * 2); // Arrondir au sup√©rieur
                document.getElementById("infoBox").style.display = "block";
                document.getElementById("infoBox").innerHTML = 
                    `√Ä ${targetPercentage}% de la VMA, votre vitesse cible est de ${targetVMA.toFixed(2)} km/h. ` +
                    `Vous devez passer ${expectedPlots} plots en 1m30 üòÑ`;
            }
        }

        function startRace() {
            duration = parseFloat(document.getElementById("duration").value);
            plotCount = 0;
            timeElapsed = 0;
            results = [];
            document.getElementById("timeElapsed").textContent = "0:00";
            document.getElementById("plotCount").textContent = plotCount;
            document.getElementById("resultsLog").innerHTML = "";
            document.getElementById("controlSection").style.display = "block";
            document.getElementById("authorSection").style.display = "none"; // Masquer la section de l'auteur
            interval = setInterval(updateTime, 1000);
        }

        function updateTime() {
            timeElapsed++;
            document.getElementById("timeElapsed").textContent = formatTime(timeElapsed);

            if (timeElapsed % 90 === 0) { // Fin d'une p√©riode de 1m30
                calculatePeriodResults();
            }

            if (timeElapsed >= duration) {
                clearInterval(interval);
                calculatePeriodResults(true);
                document.getElementById("authorSection").style.display = 'block'; // Afficher l'auteur
                alert("Course termin√©e !");
            }
        }

        function addPlot() {
            plotCount++;
            document.getElementById("plotCount").textContent = plotCount;
        }

        function calculatePeriodResults(final = false) {
            const runnerVMA = parseFloat(document.getElementById("runnerVMA").value);
            const targetPercentage = parseFloat(document.getElementById("targetPercentage").value);
            const expectedPlots = Math.ceil((runnerVMA * (targetPercentage / 100)) * 2);
            const errors = plotCount - expectedPlots;

            const periodResult = 
                `Apr√®s ${formatTime(timeElapsed)} : ${plotCount} plots pass√©s, ` +
                `${errors > 0 ? "+" : ""}${errors} erreurs.`;
            document.getElementById("resultsLog").innerHTML += `${periodResult}<br>`;
            results.push(periodResult);

            if (!final) plotCount = 0; // Remettre le nombre de plots √† z√©ro pour la prochaine p√©riode
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
        }

        function resetData() {
            document.getElementById("runnerName").value = "";
            document.getElementById("observerName").value = "";
            document.getElementById("runnerVMA").value = "";
            document.getElementById("targetPercentage").value = "";
            document.getElementById("duration").value = "90";
            document.getElementById("infoBox").style.display = "none";
            document.getElementById("plotCount").textContent = "0";
            document.getElementById("timeElapsed").textContent = "0:00";
            document.getElementById("resultsLog").innerHTML = "";
            document.getElementById("controlSection").style.display = "none";
            document.getElementById("authorSection").style.display = "none"; // Masquer l'auteur
            clearInterval(interval);
            timeElapsed = 0;
            plotCount = 0;
        }

        function downloadResults() {
            const blob = new Blob([results.join('\n

            )], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'resultats_course.txt';
            a.click();
            URL.revokeObjectURL(url);
        }
    </script>

</body>
</html>